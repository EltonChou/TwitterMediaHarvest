name: Release

concurrency:
  group: ${{github.workflow}}-${{ github.ref }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      version-strategy:
        description: 'Version bump strategy'
        type: choice
        required: true
        options:
          - patch
          - minor
          - major
          - none

env:
  artifact_name: pkg-${{ github.run_id }}

jobs:
  generate_artifact:
    name: Generate Artifact
    runs-on: ubuntu-latest
    environment: release
    timeout-minutes: 30
    outputs:
      semantic-version: ${{ steps.target-version.outputs.version }}
      version-tag: ${{ steps.target-version.outputs.version_tag }}
      changelog: ${{ steps.changelog.outputs.release }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup git
        id: setup-git
        uses: ./.github/actions/setup-git-as-bot
        with:
          app-id: ${{ vars.MH_BOT_APP_ID }}
          app-private-key: ${{ secrets.MH_BOT_APP_PRIVATE_KEY }}

      - name: Check env file
        shell: bash
        run: |
          echo "${{ secrets.ENV_FILE }}" | base64 -d >> .env
          if ! grep -q "DSN" .env; then
            echo "error: DSN not found in .env file" >&2
            exit 1
          fi

      - name: Enable corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock' # Cache all workspaces' yarn.lock

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Run Tests
        run: |
          yarn lint
          yarn ci:all
          yarn check:all

      - name: Bump version
        if: ${{ inputs.version-strategy != 'none' }}
        id: bump-version
        run: |
          OLD_VERSION=$(jq -r .version package.json)
          yarn version ${{ inputs.version-strategy }}
          NEW_VERSION=$(jq -r .version package.json)
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Confirm version
        id: target-version
        shell: bash
        run: |
          if [ "${{ inputs.version-strategy }}" = "none" ]; then
            VERSION=$(jq -r .version package.json)
            echo "No version bump selected, using existing version $VERSION"
          else
            VERSION=${{ steps.bump-version.outputs.new_version }}
            echo "Bumped version to $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Make changelog
        if: ${{ inputs.version-strategy != 'none' }}
        run: |
          yarn changelog --release ${{ steps.target-version.outputs.version }}

      - name: Extract Changelog
        id: changelog
        uses: zogot/kacl-parser@1.0.0
        with:
          version: ${{ steps.target-version.outputs.version }}

      - name: Build
        run: yarn build:all

      - name: Commit changes
        id: commit
        if: ${{ inputs.version-strategy != 'none' }}
        uses: iarekylew00t/verified-bot-commit@v2
        with:
          token: ${{ steps.setup-git.outputs.token }}
          files: |
            package.json
            CHANGELOG.md
          message: |
            version: bump version to ${{ steps.target-version.outputs.version }}

            ${{ steps.changelog.outputs.release }}

      - name: Create Tag
        id: tagging
        if: ${{ inputs.version-strategy != 'none' }}
        shell: bash
        env:
          GH_TOKEN: ${{ steps.setup-git.outputs.token }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/git/tags \
            -f 'tag=${{ steps.target-version.outputs.version-tag }}' \
            -f 'message="${{ steps.changelog.outputs.release }}"' \
            -f 'object=${{ steps.commit.outputs.commit }}' \
            -f 'type=commit' \
            -f 'tagger[name]=${{ steps.setup-git.outputs.user_name }}' \
            -f 'tagger[email]=${{ steps.setup-git.outputs.user_email }}' \
            -f 'tagger[date]='$(date --iso-8601=seconds)

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/git/refs \
            -f 'ref=refs/tags/${{ steps.target-version.outputs.version-tag }}' \
            -f 'sha=${{ steps.commit.outputs.commit }}'

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: |
            dist/
            build/
          if-no-files-found: error
          retention-days: 7

  github_release:
    name: Create Github Release
    environment: release
    runs-on: ubuntu-latest
    needs: generate_artifact
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}

      - name: Create Repository Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          name: 'TwitterMediaHarvest ${{ needs.generate_artifact.outputs.version-tag }}'
          artifacts: ${{ format('{0}/dist/*.zip,{0}/dist/*.xpi', steps.download-artifact.outputs.download-path) }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ needs.generate_artifact.outputs.changelog }}
          tag: ${{ needs.generate_artifact.outputs.version-tag }}

      - name: Rollback Release
        if: failure() && steps.create-release.outputs.id != ''
        uses: author/action-rollback@stable
        with:
          release_id: ${{ steps.create-release.outputs.id }}
          tag: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sentry_release:
    name: Create Sentry Release
    environment: release
    runs-on: ubuntu-latest
    needs: generate_artifact
    strategy:
      matrix:
        target: ['chrome', 'edge', 'firefox']

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.x'

      - name: Make release name
        id: release-name
        run: |
          echo "release=$(node ./utils/make-release-name.mjs --browser=${{ matrix.target }})" >> $GITHUB_OUTPUT

      - name: Download Artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}

      - name: Create Sentry release for ${{ matrix.target }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          # SENTRY_URL: https://sentry.io/
        with:
          version: ${{ steps.release-name.outputs.release }}
          url_prefix: '~/'
          environment: production
          sourcemaps: ${{ format('{0}/build/{1}', steps.download-artifact.outputs.download-path, matrix.target) }}

  chrome_release:
    name: Release to Chrome Web Store
    environment: release
    runs-on: ubuntu-latest
    needs:
      - generate_artifact
      - sentry_release

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}

      - name: Get file path
        id: get_filepath
        run: |
          echo "zip_file=$(ls ${{ steps.download_artifact.outputs.download-path }}/dist/*chrome*)" >> $GITHUB_OUTPUT

      - name: Publish to Chrome Web Store
        uses: mobilefirstllc/cws-publish@latest
        with:
          action: 'publish'
          client_id: ${{ secrets.CWS_CLIENT }}
          client_secret: ${{ secrets.CWS_SECRET }}
          refresh_token: ${{ secrets.CWS_TOKEN }}
          extension_id: hpcgabhdlnapolkkjpejieegfpehfdok
          zip_file: ${{ steps.get_filepath.outputs.zip_file }}

  # firefox_release:
  #   name: Release to Firefox Addons Store
  #   runs-on: ubuntu-latest
  #   environment: release
  #   needs:
  #     - generate_artifact
  #     - sentry_release

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Download Artifact
  #       id: download_artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.artifact_name }}

  #     - name: Get file path
  #       id: get_filepath
  #       run: |
  #         echo "zip_file=$(ls ${{ steps.download_artifact.outputs.download-path }}/dist/*firefox*)" >> $GITHUB_OUTPUT

  #     - name: Archive source code
  #       id: archive_source_code
  #       run: |
  #         ZIP_NAME=source.zip
  #         git archive --format zip --add-file .env -o $ZIP_NAME HEAD
  #         echo "zip_file=$ZIP_NAME" >> $GITHUB_OUTPUT

  #     - name: Upload to Firefox addons store
  #       uses: cardinalby/webext-buildtools-firefox-addons-action@v1
  #       with:
  #         zipFilePath: ${{ steps.get_filepath.outputs.zip_file }}
  #         extensionId: 'mediaharvest@addons.mozilla.org'
  #         jwtIssuer: ${{ secrets.FF_JWT_ISSUER }}
  #         jwtSecret: ${{ secrets.FF_JWT_SECRET }}
  #         sourcesZipFilePath: ${{ steps.archive_source_code.outputs.zip_file }}

  xpi_release:
    name: XPI Release
    runs-on: ubuntu-latest
    environment: release
    needs:
      - github_release
      - generate_artifact

    env:
      XPI_NAME: ${{ vars.FF_ADDON_ID_SELF_SIGN }}-${{ needs.generate_artifact.outputs.version-tag }}.xpi

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock' # Cache all workspaces' yarn.lock

      - name: Download Artifact
        id: artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}

      - name: Sign Firefox xpi
        continue-on-error: true
        run: |
          npx web-ext sign \
            -s ${{ steps.artifact.outputs.download-path }}/build/firefox-signed \
            -a dist \
            --ignore-files "*.map" \
            --channel unlisted \
            --api-key ${{ secrets.FF_JWT_ISSUER }} \
            --api-secret ${{ secrets.FF_JWT_SECRET }}

          mv dist/*.xpi dist/${{ env.XPI_NAME }}

      - name: Upload files to a GitHub release
        id: upload-xpi
        uses: svenstaro/upload-release-action@v2
        with:
          file: dist/${{ env.XPI_NAME }}
          asset_name: ${{ env.XPI_NAME }}
          release_id: ${{ needs.github_release.outputs.release-id }}

      - name: Create Gecko Release
        uses: ./.github/actions/create-gecko-release
        with:
          id: ${{ vars.FF_ADDON_ID_SELF_SIGN }}
          version: ${{ needs.generate_artifact.outputs.semantic-version }}
          url: ${{ steps.upload-xpi.outputs.browser_download_url }}
          min-browser-version: "110.0"
          endpoint: ${{ secrets.GECKO_RELEASE_ENDPOINT }}
          api-key: ${{ secrets.RELEASE_API_KEY }}

  edge_release:
    name: Release to Edge Add-ons Store
    runs-on: ubuntu-latest
    environment: release
    needs:
      - generate_artifact
      - sentry_release

    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}

      - name: Get file path
        id: get-filepath
        run: |
          echo "zip_file=$(ls ${{ steps.download-artifact.outputs.download-path }}/dist/*edge*)" >> $GITHUB_OUTPUT

      - name: Upload to Edge Add-ons Store
        uses: wdzeng/edge-addon@v2
        with:
          product-id: ${{ secrets.MS_STORE_PRODUCT_ID }}
          client-id: ${{ secrets.MS_STORE_CLIENT_ID }}
          api-key: ${{ secrets.MS_STORE_API_KEY }}
          zip-path: ${{ steps.get-filepath.outputs.zip_file }}
